<?php

/**
 * @file
 * A module to provide simple Twitter blocks using the Twitter Search API.
 */

/**
 * Implements hook_help().
 */
function twitter_block_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/block/add-twitter-block':
      return '<p>' . t('Use this page to create a new custom Twitter block.') . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function twitter_block_menu() {
  // Create an array of block settings
  $settings = array(
    'title' => 'Add Twitter block',
    'description' => 'Add a new Twitter block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_block_add_block_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'twitter_block.admin.inc',
  );

  // Add a local action to the block configuration page
  $items['admin/structure/block/add-twitter-block'] = array(
    'access arguments' => array('administer blocks'),
  ) + $settings;

  // Get the default site theme
  $default_theme = variable_get('theme_default', 'bartik');

  // Add a local action to the per-theme block configuration pages
  foreach (list_themes() as $key => $theme) {
    if ($key != $default_theme) {
      $items['admin/structure/block/list/' . $key . '/add-twitter-block'] = array(
        'access callback' => '_twitter_block_themes_access',
        'access arguments' => array($theme),
      ) + $settings;
    }
  }

  $items['admin/structure/block/administer/%/%/delete'] = array(
    'title' => 'Delete Twitter block',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twitter_block_delete', 4, 5),
    'access arguments' => array('administer blocks'),
    'type' => MENU_CALLBACK,
    'file' => 'twitter_block.admin.inc',
  );
  return $items;
}

/**
 * Menu item access callback - only admin or enabled themes can be accessed.
 */
function _twitter_block_themes_access($theme) {
  return user_access('administer blocks') && drupal_theme_access($theme);
}

/**
 * Implements hook_form_FORM_ID_alter();
 */
function twitter_block_form_block_admin_display_form_alter(&$form, &$form_state, $form_id) {
  $result = db_query('SELECT bid FROM {twitter_block}');

  // Add delete links to Twitter Block blocks
  foreach ($result as $block) {
    $form['blocks']['twitter_block_' . $block->bid]['delete'] = array(
      '#type' => 'link',
      '#title' => t('delete'),
      '#href' => 'admin/structure/block/administer/twitter_block/' . $block->bid . '/delete',
    );
  }
}

/**
 * Returns information from database about a user-created (Twitter) block.
 *
 * @param $bid
 *   ID of the block to get information for.
 *
 * @return
 *   Associative array of information stored in the database for this block.
 *   Array keys:
 *   - bid: Block ID.
 *   - info: Block description.
 *   - search_type: Type of search to perform.
 *   - include_rts: Whether to include retweets.
 *   - search_string: String to search for.
 *   - results_per_page: Number of tweets to display.
 *   - lang: Language to restrict tweets to.
 */
function twitter_block_block_get($bid) {
  return db_query("SELECT * FROM {twitter_block} WHERE bid = :bid", array(':bid' => $bid))->fetchAssoc();
}

/**
 * Implements hook_block_info().
 */
function twitter_block_block_info() {
  $blocks = array();

  $result = db_query('SELECT bid, info FROM {twitter_block} ORDER BY info');
  foreach ($result as $block) {
    $blocks[$block->bid]['info'] = $block->info;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function twitter_block_block_configure($delta = 0) {
  if ($delta) {
    $config = twitter_block_block_get($delta);

    // Unserialize the timeline settings.
    $data = unserialize($config['data']);

    // Remove the serialized timeline settings.
    unset($config['data']);

    // Add the timeline settings to the block settings.
    $twitter_block = $config + $data;
  }
  else {
    $twitter_block = array();
  }
  return twitter_block_custom_block_form($twitter_block);
}

/**
 * Form constructor for the Twitter block form.
 *
 * @param $edit
 *   (optional) An associative array of information retrieved by
 *   twitter_block_block_get() if an existing block is being edited, or an
 *   empty array otherwise. Defaults to array().
 *
 * @ingroup forms
 */
function twitter_block_custom_block_form($edit = array()) {
  $edit += array(
    'info' => '',
    'widget_id' => '',
    'theme' => '',
    'link_color' => '',
    'width' => '',
    'height' => '',
    'chrome' => '',
    'border_color' => '',
    'language' => '',
    'related' => '',
    'polite' => array(),
  );

  $form['info'] = array(
    '#type' => 'textfield',
    '#title' => t('Block description'),
    '#default_value' => $edit['info'],
    '#maxlength' => 64,
    '#description' => t('A brief description of your block. Used on the <a href="@overview">Blocks administration page</a>.', array('@overview' => url('admin/structure/block'))),
    '#required' => TRUE,
  );
  $form['widget_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Widget ID'),
    '#default_value' => $edit['widget_id'],
    '#required' => TRUE,
  );
  $form['theme'] = array(
    '#type' => 'textfield',
    '#title' => t('Theme'),
    '#default_value' => $edit['theme'],
  );
  $form['link_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Link color'),
    '#default_value' => $edit['link_color'],
  );
  $form['width'] = array(
    '#type' => 'textfield',
    '#title' => t('Width'),
    '#default_value' => $edit['width'],
  );
  $form['height'] = array(
    '#type' => 'textfield',
    '#title' => t('Height'),
    '#default_value' => $edit['height'],
  );
  $form['chrome'] = array(
    '#type' => 'textfield',
    '#title' => t('Chrome'),
    '#default_value' => $edit['chrome'],
  );
  $form['border_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Border color'),
    '#default_value' => $edit['border_color'],
  );
  $form['language'] = array(
    '#type' => 'textfield',
    '#title' => t('Language'),
    '#default_value' => $edit['language'],
  );
  $form['related'] = array(
    '#type' => 'textfield',
    '#title' => t('Related users'),
    '#default_value' => $edit['related'],
  );
  $form['polite'] = array(
    '#type' => 'select',
    '#title' => t('ARIA politeness'),
    '#options' => array(
      'polite' => t('Polite'),
      'assertive' => t('Assertive'),
    ),
    '#default_value' => $edit['polite'],
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function twitter_block_block_save($delta = 0, $edit = array()) {
  twitter_block_custom_block_save($edit, $delta);
}

/**
 * Saves a user-created Twitter block in the database.
 *
 * @param $edit
 *   Associative array of fields to save. Array keys:
 *   - info: Block description.
 *   - search_type: Type of search to perform.
 *   - include_rts: Whether to include retweets.
 *   - search_string: String to search for.
 *   - results_per_page: Number of tweets to display.
 *   - lang: Language to restrict tweets to.
 * @param $delta
 *   Block ID of the block to save.
 *
 * @return
 *   Always returns TRUE.
 */
function twitter_block_custom_block_save($edit, $delta) {
  // The serialized 'data' column contains the timeline settings.
  $data = array(
    'widget_id' => $edit['widget_id'],
    'theme' => $edit['theme'],
    'link_color' => $edit['link_color'],
    'width' => $edit['width'],
    'height' => $edit['height'],
    'chrome' => $edit['chrome'],
    'border_color' => $edit['border_color'],
    'language' => $edit['language'],
    'related' => $edit['related'],
    'polite' => $edit['polite'],
  );

  // Save the block configuration
  $delta = db_update('twitter_block')
    ->fields(array(
      'info' => $edit['info'],
      'data' => serialize($data),
    ))
    ->condition('bid', $delta)
    ->execute();

  return TRUE;
}

/**
 * Implements hook_block_view().
 */
function twitter_block_block_view($delta) {
  // Load the configuration.
  $config = twitter_block_block_get($delta);

  // Unserialize the timeline 
  $data = unserialize($config['data']);

  $block = array();
  $block['subject'] = check_plain($config['info']);
  $block['content'] = array(
    '#theme' => 'link',
    '#text' => 'Tweets by @twitterapi',
    '#path' => 'https://twitter.com/twitterapi',
    '#options' => array(
      'attributes' => array(
        'class' => array('twitter-timeline'),
        'data-widget-id' => $data['widget_id'],
        'data-theme' => $data['theme'],
        'data-link-color' => $data['link_color'],
        'width' => $data['width'],
        'height' => $data['height'],
        'chrome' => $data['chrome'],
        'data-border-color' => $data['border_color'],
        'language' => $data['language'],
        'data-related' => $data['language'],
        'aria-polite' => $data['polite'],
      ),
      'html' => FALSE,
    ),
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'twitter_block') . '/twitter_block.js',
      ),
    ),
  );

  return $block;
}
